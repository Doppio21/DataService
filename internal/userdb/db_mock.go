// Code generated by MockGen. DO NOT EDIT.
// Source: dataservice/internal/userdb (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -package userdb -destination db_mock.go . DB
//

// Package userdb is a generated GoMock package.
package userdb

import (
	context "context"
	schema "dataservice/internal/schema"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddPersonInfo mocks base method.
func (m *MockDB) AddPersonInfo(arg0 context.Context, arg1 schema.PersonInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPersonInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPersonInfo indicates an expected call of AddPersonInfo.
func (mr *MockDBMockRecorder) AddPersonInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersonInfo", reflect.TypeOf((*MockDB)(nil).AddPersonInfo), arg0, arg1)
}

// DeletePersonInfo mocks base method.
func (m *MockDB) DeletePersonInfo(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonInfo indicates an expected call of DeletePersonInfo.
func (mr *MockDBMockRecorder) DeletePersonInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonInfo", reflect.TypeOf((*MockDB)(nil).DeletePersonInfo), arg0, arg1)
}

// GetPersonInfo mocks base method.
func (m *MockDB) GetPersonInfo(arg0 context.Context, arg1 schema.GetRequest) ([]schema.PersonInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonInfo", arg0, arg1)
	ret0, _ := ret[0].([]schema.PersonInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonInfo indicates an expected call of GetPersonInfo.
func (mr *MockDBMockRecorder) GetPersonInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonInfo", reflect.TypeOf((*MockDB)(nil).GetPersonInfo), arg0, arg1)
}

// UpdatePersonInfo mocks base method.
func (m *MockDB) UpdatePersonInfo(arg0 context.Context, arg1 schema.PersonInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePersonInfo indicates an expected call of UpdatePersonInfo.
func (mr *MockDBMockRecorder) UpdatePersonInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonInfo", reflect.TypeOf((*MockDB)(nil).UpdatePersonInfo), arg0, arg1)
}
